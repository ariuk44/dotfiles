
# stringify
snippet jstr
JSON.stringify($1);$0
endsnippet

# parse
snippet jparse
JSON.parse($1);$0
endsnippet

# quotmark
snippet quot
/* jshint quotmark : false */
endsnippet

# require
snippet req
require("$1")$0
endsnippet

# if main
snippet if_main
// ignore:start

if (require.main === module) {
	$0
}

// ignore:end
endsnippet

# parser.log
snippet plog
parser.log($1);$0
endsnippet

# console.log
snippet log
console.log($1);$0
endsnippet

# console.warn
snippet warn
console.warn($1);$0
endsnippet

# console.info
snippet info
console.info($1);$0
endsnippet

# console.error
snippet error
console.error($1);$0
endsnippet

# function
snippet self_exec_fn
(function (${1}) {
	$0
}());
endsnippet

# function
snippet fn
function ${1:function_name} ($2) {
	$0
}$3
endsnippet

# async function
snippet afn
async function ${1:function_name} ($2) {
	$0
}$3
endsnippet

# Exports
snippet ex "export common js pattern"
module.exports = ${1:thing};$0
endsnippet

snippet exc "export class"
class ${1:ClassName} {
	${2:constructor} (${3:params}) {
		$0
	}
}

module.exports = $1;
endsnippet

snippet exs "export service"
class ${1:ClassName}Service {
	${2:constructor} (${3:params}) {
		$0
	}
}

module.exports = new $1Service();
endsnippet

# function
snippet exfn
module.exports = function ${1:function_name} ($2) {
	$0
};
endsnippet

# function
snippet comp
exports.selector = "$1";

exports.style = \`
    /* css */
\`;

exports.template = \`
    { jt }
\`;

exports.bindings = {};

exports.controller = {};
endsnippet

# function
snippet exfna
module.exports = ${1:params} => {
	$0
};
endsnippet

# function
#snippet fna
#let ${1:function_name} = function ($2) {
	#$0
#};
#endsnippet

# Anonymous function
snippet fna
${1:params} => $2$0
endsnippet

# Anonymous function ends with semicolon
snippet fnae
function ($1) {
	$0
};
endsnippet

# Class
snippet class
class ${1:ConstructorName} {
	${3:method} (${4:params}) {
		$0
	}
}$2
endsnippet

# Class
snippet met
${1:method} (${2:params}) {
	$0
}
endsnippet

# if condition
snippet if
if (${1:condition}) {
	$0
}
endsnippet

# for each loop number of times iterate
snippet iter
for (${2:i} = ${1:length}; $2--;) {
	$0
}
endsnippet

# for each loop
snippet each
for (${2:let }${3:i} = ${4:0}; $3 < ${1:things}.length; ++$3) {
	$0
}
endsnippet

snippet eachr
for (${3:let }${2:i} = ${1:items}.length - 1; $2 >= 0; --$2) {
	$0
}
endsnippet

snippet fe
${1:array}.forEach(${2:params} => $0);
endsnippet

snippet obj
Object.create(null);$0
endsnippet

snippet ofe
Object.keys(${1:things}).forEach(${2:params} => {
	$0
});
endsnippet

snippet reduce
${1:array}.reduce((${3:result}, ${4:element}) => {
	return ${5:result};
}, ${2:default});
endsnippet

snippet fil
${1:array}.filter(${2:params} => {
	$0
});
endsnippet

snippet map
${1:array}.map(${2:params} => $0);
endsnippet

snippet ev
${1:array}.every(${2:params} => $0);
endsnippet

snippet some
${1:things}.some(function (${2:thing}) {
	$0
});
endsnippet

snippet ngex
angular.extend(${1:destination}, ${2:source...});$0
endsnippet

snippet ngeach
angular.forEach(${1:things}, function (${2:thing}) {
	$0
});
endsnippet

snippet ngisarr
$0angular.isArray(${1:thing})
endsnippet

snippet water
waterfall([
	cb => {
		$0
	}
], ${3:${1:err} => {
	$2
}});
endsnippet

snippet while
async.whilst(() => ${1:i < len}, cb => {
	${0}
}, ${2:callback});
endsnippet

snippet switch
switch (${1:value}) {
	case ${2:case_value} :
		$0
		break;
}
endsnippet

snippet des
describe("${1:description}", () => {
	$0
});
endsnippet

snippet it
it("should $1", (${2:done}) => {
	$0
});
endsnippet

snippet bef
beforeEach(() => {
	$0
});
endsnippet

snippet aft
afterEach(() => {
	$0
});
endsnippet

snippet try
try {
	$0
} catch (e) {$1}
endsnippet

snippet expect
expect(${1:value}).to.be(${2:expectation});$0
endsnippet

snippet strict
"use strict";$0
endsnippet

snippet ctr
constructor : function ($1) {
	$0
}
endsnippet

snippet jeefo_class
jeefo_class.create("${1:NewClassName}", ${2:BaseClass}, {
	constructor : function ($3) {
		$0
	}
});
endsnippet

snippet @ret
@returns {${1:type}} - ${2:description}
endsnippet

snippet @par
@param ${1:param_name} {${2:type}} - ${3:description}
endsnippet

snippet doc
/**
 * $0
 */
endsnippet

snippet indxdb "indexedDB new feature on browser"
indexedDB
endsnippet
