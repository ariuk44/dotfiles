
# stringify
snippet str
JSON.stringify($1);$0
endsnippet

# parse
snippet parse
JSON.parse($1);$0
endsnippet

# quotmark
snippet quot
/* jshint quotmark : false */
endsnippet

# require
snippet req
require("$1")$0
endsnippet

# console.log
snippet log
console.log($1);$0
endsnippet

# console.warn
snippet warn
console.warn($1);$0
endsnippet

# console.info
snippet info
console.info($1);$0
endsnippet

# console.error
snippet error
console.error($1);$0
endsnippet

# function
snippet self_exec_fn
(function (${1}) {
	$0
}());
endsnippet

# function
snippet fn
var ${1:function_name} = function ($2) {
	$0
};
endsnippet

# Anonymous function
snippet fna
function ($1) {
	$0
}
endsnippet

# Anonymous function ends with semicolon
snippet fnae
function ($1) {
	$0
};
endsnippet

# if condition
snippet if
if (${1:condition}) {
	$0
}
endsnippet

# for each loop number of times iterate
snippet iter
for (${2:i} = ${1:length}; $2--;) {
	$0
}
endsnippet

# for each loop
snippet each
for (${2:var }${3:i} = 0, $3_length = ${1:things}.length; $3 < $3_length; ++$3) {
	$0
}
endsnippet

snippet eachr
for (${3:var }${2:i} = ${1:items}.length - 1; $2 >= 0; --$2) {
	$0
}
endsnippet

snippet fe
${1:things}.forEach(function (${2:thing}) {
	$0
});
endsnippet

snippet obj
Object.create(null);$0
endsnippet

snippet ofe
Object.keys(${1:things}).forEach(function (${2:thing}) {
	$0
});
endsnippet

snippet reduce
${1:things}.reduce(function (${2:result}, ${3:thing}) {
	$0
	return $2;
});
endsnippet

snippet fil
${1:things}.filter(function (${2:thing}) {
	$0
});
endsnippet

snippet map
${1:things}.map(function (${2:thing}) {
	$0
});
endsnippet

snippet ev
${1:things}.every(function (${2:thing}) {
	$0
});
endsnippet

snippet some
${1:things}.some(function (${2:thing}) {
	$0
});
endsnippet

snippet ngex
angular.extend(${1:destination}, ${2:source...});$0
endsnippet

snippet ngeach
angular.forEach(${1:things}, function (${2:thing}) {
	$0
});
endsnippet

snippet ngisarr
$0angular.isArray(${1:thing})
endsnippet

snippet water
waterfall([
	cb => {
		$0
	}
], ${3:${1:err} => {
	$2
}});
endsnippet

snippet while
async.whilst(() => ${1:i < len}, cb => {
	${0}
}, ${2:callback});
endsnippet

snippet switch
switch (${1:value}) {
	case ${2:case_value} :
		$0
		break;
}
endsnippet

snippet des
describe("${1:description}", () => {
	$0
});
endsnippet

snippet it
it("Should $1", (${2:done}) => {
	$0
});
endsnippet

snippet bef
beforeEach(() => {
	$0
});
endsnippet

snippet aft
afterEach(() => {
	$0
});
endsnippet

snippet ex
expect(${1:value}).toBe(${2:expectation});$0
endsnippet


